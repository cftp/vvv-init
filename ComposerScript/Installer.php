<?php 

namespace ComposerScript;

use Composer\Script\Event;

class Installer {

	/**
	 * Hooks the post-package-install Composer event
	 *
	 * @param Event $event A Composer Event object
	 * @return void
	 * @author Simon Wheatley
	 **/
	public static function post_package_install( Event $event ) {
		self::handle_mu_plugin( $event );
	}

	/**
	 * Hooks the post-package-update Composer event
	 *
	 * @param Event $event A Composer Event object
	 * @return void
	 * @author Simon Wheatley
	 **/
	public static function post_package_update( Event $event ) {
		self::handle_mu_plugin( $event );
	}

	/**
	 * Hooks the pre-package-uninstall Composer event
	 *
	 * @param Event $event A Composer Event object
	 * @return void
	 * @author Simon Wheatley
	 **/
	public static function post_package_install( Event $event ) {
		self::remove_require_file( $event );
	}

	/**
	 * Process a mu-plugins installed package, creating the relevant
	 * require file(s).
	 *
	 * @param Event $event A Composer Event object
	 * @return void
	 * @author Simon Wheatley
	 **/
	protected static function handle_mu_plugin( Event $event ) {
		$composer  = $event->getComposer();
		$io        = $event->getIO();
		$operation = $event->getOperation();
		$package   = $operation->getPackage();
		$im        = $composer->getInstallationManager();

		$install_path = $im->getInstallPath( $package );

		if ( 'htdocs/wp-content/mu-plugins' == dirname( $install_path ) ) {
			$plugin_files = self::get_plugin_files( $install_path );
			$plugin_name = $package->getPrettyName();
			$plugin_name = $package->getName();
			$plugin_description = $package->getDescription();
			self::write_plugin_require( $io, $plugin_files, $install_path );
		}
	}

	/**
	 * Remove the require file for a mu-plugins installed package.
	 *
	 * @param Event $event A Composer Event object
	 * @return void
	 * @author Simon Wheatley
	 **/
	protected static function remove_require_file( Event $event ) {
		// @TODO: Remove the related auto-generated require plugin file
	}

	/**
	 * Get all the plugin files within the package, and their plugin names.
	 *
	 * @param strong $install_path The path to the Composer package (a mu-plugins subdirectory)
	 * @return array An array of plugin paths (key) and plugin names (value)
	 * @author Simon Wheatley
	 **/
	protected static function get_plugin_files( $install_path ) {
		$files = array();
		foreach ( glob( "{$install_path}*.php" ) as $file ) {
			$file_contents = file_get_contents( $file, false, null, -1, 8192 );
			if ( preg_match( '/^[ \t\/*#@]*Plugin Name:(.*)$/mi', $file_contents, $matches ) ) {
				$files[ $file ] = trim( $matches[1] );
			}
		}
		return $files;
	}

	/**
	 * Write a basic plugin file, which requires the relevant file
	 * inside mu-plugins/[folder].
	 *
	 * @param array $plugin_files An array of plugin paths (key) and plugin names (value)
	 * @param strong $install_path The path to the Composer package (a mu-plugins subdirectory)
	 * @return void
	 * @author Simon Wheatley
	 **/
	protected static function write_plugin_require( $io, $plugin_files, $install_path ) {
		foreach ( $plugin_files as $plugin_file => $plugin_name ) {
			$lines = array();
			$lines[] = '<?php';
			$lines[] = '/**';
			$lines[] = sprintf( ' * Plugin Name: %s', $plugin_name );
			$lines[] = ' * ';
			$lines[] = ' * This file was autogenerated by a Composer install script ';
			$lines[] = sprintf( ' * located at: %s.', __FILE__ );
			$lines[] = ' */';
			$lines[] = '';
			$lines[] = sprintf( 'require_once( dirname( __FILE__ ) . \'/%s/%s\' );', basename( dirname( $plugin_file ) ), basename( $plugin_file ) );
			$lines[] = '';
			$file_contents = implode( PHP_EOL, $lines );
			$require_plugin_file = sprintf( '%s/auto-require-%s', dirname( $install_path ), basename( $plugin_file ) );
			file_put_contents( $require_plugin_file, $file_contents );
			$io->write( sprintf( 'Created auto-require file for "%s" at %s', $plugin_name, $require_plugin_file ) );

		}
	}
}
